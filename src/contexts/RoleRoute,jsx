import { useAuthState } from 'react-firebase-hooks/auth';
import { auth, db } from '../firebase';
import { doc, getDoc } from 'firebase/firestore';
import { Navigate } from 'react-router-dom';
import { useEffect, useState } from 'react';

export default function RoleRoute({ children, requiredRole }) {
  const [user, loading] = useAuthState(auth);
  const [role, setRole] = useState(null);
  const [loadingRole, setLoadingRole] = useState(true); // Renaming checking to loadingRole for clarity

  useEffect(() => {
    const checkRole = async () => {
      if (user) {
        try {
          const docRef = doc(db, "users", user.uid);
          const snap = await getDoc(docRef);
          if (snap.exists()) {
            setRole(snap.data().role);
          } else {
            // Handle case if user role does not exist
            setRole(null);
          }
        } catch (error) {
          console.error('Error fetching user role:', error);
          setRole(null); // Fail gracefully if there's an error
        }
      }
      setLoadingRole(false);
    };
    checkRole();
  }, [user]);

  if (loading || loadingRole) return <div>Loading...</div>;

  if (!user || role !== requiredRole) {
    // Redirect to login if user is not logged in or role doesn't match
    return <Navigate to="/login" />;
  }

  return children;
}
